{"version":3,"sources":["logo.svg","zelda.mp3","fonts/animalCrossing.ttf","numberPad.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NumberPad","props","state","code","guessed","incorrect","correct","len","this","length","string","i","classBuilder","className","number","newVal","setState","setTimeout","document","body","classList","add","getElementsByClassName","play","buttons","push","onClick","guess","key","guessSection","numberPad","checkCode","src","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,wHCuF5BC,G,wDAnFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAMF,EAAME,KACZC,QAAS,GACTC,WAAW,EACXC,SAAS,GANC,E,2DAad,IAFA,IAAMC,EAAMC,KAAKN,MAAME,QAAQK,OAC3BC,EAAS,GACLC,EAAI,EAAGA,EAAIH,KAAKN,MAAMC,KAAKM,OAAQE,IAEnCD,GADDC,EAAIJ,EACOC,KAAKN,MAAME,QAAQO,GAEnB,IAClB,IAAMC,EAAgBJ,KAAKN,MAAMG,UAAY,kBAAoBG,KAAKN,MAAMI,QAAU,gBAAiB,QACvG,OACI,uBAAGO,UAAYD,GAAiBF,K,4BAIlCI,GACF,GAAGN,KAAKN,MAAME,QAAQK,OAASD,KAAKN,MAAMC,KAAKM,OAAO,CAClD,IAAIM,EAASP,KAAKN,MAAME,QAAU,GAAKU,EACvCN,KAAKQ,SAAS,CACVZ,QAASW,O,kCAKT,IAAD,OACJP,KAAKN,MAAME,SAAWI,KAAKN,MAAMC,MAChCK,KAAKQ,SAAS,CACVV,SAAS,IAGbW,YAAW,WACP,EAAKD,SAAS,CAACV,SAAS,EAAOF,QAAS,OACzC,KAEHc,SAASC,KAAKC,UAAUC,IAAI,WACZH,SAASI,uBAAuB,iBAAiB,GACzDC,SAGRf,KAAKQ,SAAS,CACVX,WAAW,IAGfY,YAAW,WACP,EAAKD,SAAS,CAACX,WAAW,EAAOD,QAAS,OAC3C,Q,kCAMP,IAFQ,IAAD,OACHoB,EAAU,GADP,WAECb,GACJa,EAAQC,KAAK,4BAAQC,QAAU,kBAAM,EAAKC,MAAMhB,EAAE,IAAKiB,IAAM,UAAYjB,GAAMA,EAAI,KAD/EA,EAAI,EAAGA,EAAI,EAAGA,IAAtB,EAAQA,GAER,OACI,yBAAKE,UAAU,aACTW,K,+BAKL,IAAD,OACJ,OACI,yBAAKX,UAAU,sBACTL,KAAKqB,eACLrB,KAAKsB,YACP,4BAAQjB,UAAU,YAAYa,QAAU,kBAAM,EAAKK,cAAnD,SACA,2BAAOlB,UAAU,iBACb,4BAAQmB,IAAI,sB,GA7ERC,cCiBTC,MAdf,WACE,OACE,yBAAKrB,UAAU,OACb,uBAAGA,UAAU,QAAb,8EACA,kBAAC,EAAD,CAAWV,KAAK,SAChB,yBAAKU,UAAU,UACb,0CACA,qGACA,oDCFYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c3dc544.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/zelda.4e28f3e7.mp3\";","module.exports = __webpack_public_path__ + \"static/media/animalCrossing.796b643a.ttf\";","import React, { Component } from 'react'\nimport './zelda.mp3'\n\nclass NumberPad extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            code: props.code,\n            guessed: \"\",\n            incorrect: false,\n            correct: false\n        }\n    }\n\n    guessSection(){\n        const len = this.state.guessed.length\n        let string = \"\"\n        for(let i = 0; i < this.state.code.length; i++)\n            if(i < len)\n                string += this.state.guessed[i]\n            else   \n                string += \"-\"\n        const classBuilder = (this.state.incorrect)? \"guess incorrect\": (this.state.correct)? \"guess correct\": \"guess\"\n        return(\n            <p className={ classBuilder }>{ string }</p>\n        )\n    }\n\n    guess(number){\n        if(this.state.guessed.length < this.state.code.length){\n            let newVal = this.state.guessed + \"\" + number\n            this.setState({\n                guessed: newVal\n            })\n        }\n    }\n\n    checkCode(){\n        if(this.state.guessed == this.state.code){\n            this.setState({\n                correct: true\n            })\n\n            setTimeout(() => {\n                this.setState({correct: false, guessed: \"\"})\n            }, 500)\n\n            document.body.classList.add(\"correct\")\n            const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n            audioEl.play()\n        } else {\n\n            this.setState({\n                incorrect: true\n            })\n\n            setTimeout(() => {\n                this.setState({incorrect: false, guessed: \"\"})\n            }, 500)\n        }\n    }\n\n    numberPad(){\n        let buttons = [];\n        for(let i = 0; i < 9; i++)\n            buttons.push(<button onClick={ () => this.guess(i+1) } key={ \"button_\" + i }>{ i + 1 }</button>)\n        return (\n            <div className=\"numberPad\">\n                { buttons }\n            </div>\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"numberPadContainer\">\n                { this.guessSection() }\n                { this.numberPad() }\n                <button className=\"checkCode\" onClick={ () => this.checkCode() }>Check</button>\n                <audio className=\"audio-element\">\n                    <source src=\"./zelda.mp3\"></source>\n                </audio>\n            </div>\n        )\n    }\n}\n\nexport default NumberPad","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './numberPad'\nimport NumberPad from './numberPad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p className=\"info\">Ben and Charlie, for your final clue you must enter the correct pass code.</p>\n      <NumberPad code=\"1985\"></NumberPad>\n      <div className=\"hidden\">\n        <h1>WELL DONE!</h1>\n        <p>Now to get your final prize, find a place where you can see your eyes.</p>\n        <p>HAPPY BUNNY DAY!!!</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/animalCrossing.ttf'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}